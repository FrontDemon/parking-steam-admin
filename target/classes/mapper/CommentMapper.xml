<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smdm.dao.CommentMapper">
  <resultMap id="BaseResultMap" type="com.smdm.bean.Comment">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="comment" jdbcType="VARCHAR" property="comment" />
    <result column="com_time" jdbcType="TIMESTAMP" property="comTime" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="replication" jdbcType="VARCHAR" property="replication" />
    <result column="reply_time" jdbcType="TIMESTAMP" property="replyTime" />
    <result column="admin_id" jdbcType="INTEGER" property="adminId" />
  </resultMap>
  <resultMap id="WithDetailsResultMap" type="com.smdm.bean.Comment">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="comment" jdbcType="VARCHAR" property="comment" />
    <result column="com_time" jdbcType="TIMESTAMP" property="comTime" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="replication" jdbcType="VARCHAR" property="replication" />
    <result column="reply_time" jdbcType="TIMESTAMP" property="replyTime" />
    <result column="admin_id" jdbcType="INTEGER" property="adminId" />
    <association property="user" javaType="com.smdm.bean.User">
		<id column="u_id" jdbcType="INTEGER" property="id" />
	    <result column="u_name" jdbcType="VARCHAR" property="name" />
	</association>
	<association property="admin" javaType="com.smdm.bean.Admin">
		<id column="a_id" jdbcType="INTEGER" property="id" />
	    <result column="a_name" jdbcType="VARCHAR" property="name" />
	</association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Example_Where_Clause2">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and c.${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and c.${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and c.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and c.${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, comment, com_time, user_id, replication, reply_time, admin_id
  </sql>
  <sql id="With_Details_Column_List">
    c.id, c.comment, c.com_time, c.user_id, c.replication, c.reply_time, c.admin_id,
    u.id "u_id", u.name "u_name", a.id "a_id", a.name "a_name"
  </sql>
  <select id="selectByExample" parameterType="com.smdm.bean.CommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeyWithDetails" parameterType="java.lang.Integer" resultMap="WithDetailsResultMap">
    select 
    <include refid="With_Details_Column_List" />
    from comment c
    LEFT JOIN user u on c.user_id=u.id
    LEFT JOIN admin a on c.admin_id=a.id
    where c.id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAllWithDetails" parameterType="java.lang.Integer" resultMap="WithDetailsResultMap">
    select 
    <include refid="With_Details_Column_List" />
    from comment c
    LEFT JOIN user u on c.user_id=u.id
    LEFT JOIN admin a on c.admin_id=a.id
  </select>
  <select id="selectByExampleWithDetails" parameterType="com.smdm.bean.CommentExample" resultMap="WithDetailsResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="With_Details_Column_List" />
    from comment c
    LEFT JOIN user u on c.user_id=u.id
    LEFT JOIN admin a on c.admin_id=a.id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause2" />
    </if>
    <if test="orderByClause != null">
      order by c.${orderByClause}
    </if>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.smdm.bean.CommentExample">
    delete from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.smdm.bean.Comment">
    insert into comment (id, comment, com_time, 
      user_id, replication, reply_time, 
      admin_id)
    values (#{id,jdbcType=INTEGER}, #{comment,jdbcType=VARCHAR}, #{comTime,jdbcType=TIMESTAMP}, 
      #{userId,jdbcType=INTEGER}, #{replication,jdbcType=VARCHAR}, #{replyTime,jdbcType=TIMESTAMP}, 
      #{adminId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.smdm.bean.Comment">
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="comment != null">
        comment,
      </if>
      <if test="comTime != null">
        com_time,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="replication != null">
        replication,
      </if>
      <if test="replyTime != null">
        reply_time,
      </if>
      <if test="adminId != null">
        admin_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="comment != null">
        #{comment,jdbcType=VARCHAR},
      </if>
      <if test="comTime != null">
        #{comTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="replication != null">
        #{replication,jdbcType=VARCHAR},
      </if>
      <if test="replyTime != null">
        #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="adminId != null">
        #{adminId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smdm.bean.CommentExample" resultType="java.lang.Long">
    select count(*) from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update comment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.comment != null">
        comment = #{record.comment,jdbcType=VARCHAR},
      </if>
      <if test="record.comTime != null">
        com_time = #{record.comTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.replication != null">
        replication = #{record.replication,jdbcType=VARCHAR},
      </if>
      <if test="record.replyTime != null">
        reply_time = #{record.replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.adminId != null">
        admin_id = #{record.adminId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update comment
    set id = #{record.id,jdbcType=INTEGER},
      comment = #{record.comment,jdbcType=VARCHAR},
      com_time = #{record.comTime,jdbcType=TIMESTAMP},
      user_id = #{record.userId,jdbcType=INTEGER},
      replication = #{record.replication,jdbcType=VARCHAR},
      reply_time = #{record.replyTime,jdbcType=TIMESTAMP},
      admin_id = #{record.adminId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smdm.bean.Comment">
    update comment
    <set>
      <if test="comment != null">
        comment = #{comment,jdbcType=VARCHAR},
      </if>
      <if test="comTime != null">
        com_time = #{comTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="replication != null">
        replication = #{replication,jdbcType=VARCHAR},
      </if>
      <if test="replyTime != null">
        reply_time = #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="adminId != null">
        admin_id = #{adminId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smdm.bean.Comment">
    update comment
    set comment = #{comment,jdbcType=VARCHAR},
      com_time = #{comTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      replication = #{replication,jdbcType=VARCHAR},
      reply_time = #{replyTime,jdbcType=TIMESTAMP},
      admin_id = #{adminId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>